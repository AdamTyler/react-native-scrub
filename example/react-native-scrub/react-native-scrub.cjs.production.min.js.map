{"version":3,"file":"react-native-scrub.cjs.production.min.js","sources":["../../src/linear.ts","../../src/index.tsx"],"sourcesContent":["function makeItArrayIfItsNot(input) {\n  return Object.prototype.toString.call(input) !== '[object Array]'\n    ? [input]\n    : input;\n}\n\n/**\n *\n * Utilizes bisection method to search an interval to which\n * point belongs to, then returns an index of left or right\n * border of the interval\n *\n * @param {Number} point\n * @param {Array} intervals\n * @param {Boolean} useRightBorder\n * @returns {Number}\n */\n\nfunction findIntervalBorderIndex(point, intervals, useRightBorder?: boolean) {\n  //If point is beyond given intervals\n  if (point < intervals[0]) return 0;\n  if (point > intervals[intervals.length - 1]) return intervals.length - 1;\n  //If point is inside interval\n  //Start searching on a full range of intervals\n  var indexOfNumberToCompare,\n    leftBorderIndex = 0,\n    rightBorderIndex = intervals.length - 1;\n  //Reduce searching range till it find an interval point belongs to using binary search\n  while (rightBorderIndex - leftBorderIndex !== 1) {\n    indexOfNumberToCompare =\n      leftBorderIndex + Math.floor((rightBorderIndex - leftBorderIndex) / 2);\n    point >= intervals[indexOfNumberToCompare]\n      ? (leftBorderIndex = indexOfNumberToCompare)\n      : (rightBorderIndex = indexOfNumberToCompare);\n  }\n  return useRightBorder ? rightBorderIndex : leftBorderIndex;\n}\n\n/**\n * Evaluates interpolating line/lines at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}\n */\n\n/**\n *\n * Evaluates y-value at given x point for line that passes\n * through the points (x0,y0) and (y1,y1)\n *\n * @param x\n * @param x0\n * @param y0\n * @param x1\n * @param y1\n * @returns {Number}\n */\n\nfunction linearInterpolation(x, x0, y0, x1, y1) {\n  var a = (y1 - y0) / (x1 - x0);\n  var b = -a * x0 + y0;\n  return a * x + b;\n}\n\nexport function linear(pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results: any = [];\n  pointsToEvaluate = makeItArrayIfItsNot(pointsToEvaluate);\n  pointsToEvaluate.forEach(function(point) {\n    var index = findIntervalBorderIndex(point, functionValuesX);\n    if (index == functionValuesX.length - 1) index--;\n    results.push(\n      linearInterpolation(\n        point,\n        functionValuesX[index],\n        functionValuesY[index],\n        functionValuesX[index + 1],\n        functionValuesY[index + 1]\n      )\n    );\n  });\n  return results;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  Dimensions,\n  Animated,\n  ViewStyle,\n} from 'react-native';\nimport { linear } from './linear';\nimport { clamp, range } from 'lodash-es';\n\nimport {\n  PanGestureHandler,\n  State,\n  PanGestureHandlerStateChangeEvent,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\ninterface TickProps {\n  value: number;\n  index: number;\n  spacing: number;\n}\n\ninterface Props {\n  min: number;\n  max: number;\n  step: number;\n  value: number;\n  spacing?: number;\n  onChange: (value: number) => void;\n  onUpdate: (value: number) => void;\n  round?: (value: number) => number;\n  renderTick: (tick: TickProps) => React.ReactNode;\n}\n\nconst FULL_WIDTH = Dimensions.get('window').width;\n\nconst defaultRound = (v: number) => Math.round(v);\n\nexport const Tick: React.FC<TickProps> = ({ value, index, spacing }) => {\n  let tickSize = 30;\n  if (index % 5 === 0) {\n    tickSize = 40;\n  }\n  if (index % 10 === 0) {\n    tickSize = 50;\n  }\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        left: index * spacing,\n      }}\n    >\n      <View\n        style={[\n          styles.tick,\n          {\n            height: tickSize,\n          },\n        ]}\n      />\n      {index % 10 === 0 && (\n        <Text style={styles.tickLabel}>{Math.round(value)}</Text>\n      )}\n    </View>\n  );\n};\n\nexport const CenterLine: React.FC<{ style?: ViewStyle }> = ({ style }) => {\n  return <View style={[styles.centerLine, style]} />;\n};\n\nexport const Slider: React.FC<Props> = ({\n  min,\n  max,\n  step,\n  value,\n  onChange,\n  onUpdate,\n  round = defaultRound,\n  spacing = 20,\n  renderTick,\n  children,\n}) => {\n  const TICKS_ARRAY = range(min, max, step);\n  const NUMBER_OF_TICKS = TICKS_ARRAY.length;\n  const [width, setWidth] = useState(FULL_WIDTH);\n  const halfWidth = (width || 0) / 2;\n  const minScroll = -(NUMBER_OF_TICKS * spacing);\n  const maxScroll = 0;\n\n  const valueToPx = (degrees: number) => {\n    return linear(degrees, [max, min], [minScroll, maxScroll])[0];\n  };\n\n  const [translateX] = useState(() => new Animated.Value(valueToPx(value)));\n  const offsetX = useRef(0);\n\n  useEffect(() => {\n    Animated.spring(translateX, {\n      toValue: valueToPx(value),\n    }).start();\n    offsetX.current = 0;\n  }, [value]);\n\n  const dragXToValue = (x: number) => {\n    const value = linear(x, [minScroll, maxScroll], [max, min])[0];\n    return round(value);\n  };\n\n  const onHandlerStateChange = (event: PanGestureHandlerStateChangeEvent) => {\n    let activeValue = value;\n\n    if (event.nativeEvent.state === State.END) {\n      activeValue = dragXToValue(\n        valueToPx(value) + offsetX.current + event.nativeEvent.translationX\n      );\n    }\n\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      offsetX.current += event.nativeEvent.translationX;\n      onChange(clamp(activeValue, min, max));\n    }\n  };\n\n  const onGestureEvent = (event: PanGestureHandlerGestureEvent) => {\n    if (\n      event.nativeEvent.state === State.ACTIVE ||\n      event.nativeEvent.state === State.END\n    ) {\n      let activeValue = dragXToValue(\n        valueToPx(value) + offsetX.current + event.nativeEvent.translationX\n      );\n\n      if (activeValue < min) {\n        activeValue = min;\n      } else if (activeValue > max) {\n        activeValue = max;\n      }\n\n      onUpdate(activeValue);\n\n      Animated.spring(translateX, {\n        toValue: valueToPx(activeValue),\n        velocity: event.nativeEvent.velocityX,\n      }).start(() => {\n        offsetX.current = 0;\n      });\n    }\n  };\n\n  return (\n    <PanGestureHandler\n      onGestureEvent={onGestureEvent}\n      onHandlerStateChange={onHandlerStateChange}\n    >\n      <View\n        style={styles.container}\n        onLayout={e => {\n          setWidth(e.nativeEvent.layout.width);\n        }}\n      >\n        <Animated.View\n          style={[\n            styles.ticks,\n            {\n              left: halfWidth,\n              transform: [\n                {\n                  translateX: translateX.interpolate({\n                    inputRange: [valueToPx(max), valueToPx(min)],\n                    outputRange: [valueToPx(max), valueToPx(min)],\n                    extrapolate: 'clamp',\n                  }),\n                },\n              ],\n            },\n          ]}\n        >\n          {TICKS_ARRAY.map((i, index) => {\n            return renderTick({\n              value: i,\n              index,\n              spacing,\n            });\n          })}\n        </Animated.View>\n        {children}\n      </View>\n    </PanGestureHandler>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: 100,\n  },\n  ticks: {\n    position: 'absolute',\n    flexDirection: 'row',\n    width: '100%',\n    height: 100,\n  },\n  tick: {\n    position: 'absolute',\n    top: 0,\n    width: 1,\n    backgroundColor: '#dfdfe6',\n    overflow: 'visible',\n  },\n  tickLabel: {\n    position: 'absolute',\n    bottom: 0,\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  centerLine: {\n    position: 'absolute',\n    top: 0,\n    left: '50%',\n    height: 50,\n    width: 2,\n    borderRadius: 1,\n  },\n});\n"],"names":["linear","pointsToEvaluate","functionValuesX","functionValuesY","input","results","Object","prototype","toString","call","forEach","point","x0","y0","a","index","intervals","useRightBorder","length","indexOfNumberToCompare","leftBorderIndex","rightBorderIndex","Math","floor","findIntervalBorderIndex","push","FULL_WIDTH","Dimensions","get","width","defaultRound","v","round","styles","StyleSheet","create","container","height","ticks","position","flexDirection","tick","top","backgroundColor","overflow","tickLabel","bottom","fontSize","textAlign","centerLine","left","borderRadius","React","View","style","min","max","value","onChange","onUpdate","spacing","renderTick","children","TICKS_ARRAY","range","step","NUMBER_OF_TICKS","useState","setWidth","halfWidth","minScroll","valueToPx","degrees","translateX","Animated","Value","offsetX","useRef","useEffect","spring","toValue","start","current","dragXToValue","x","PanGestureHandler","onGestureEvent","event","nativeEvent","state","State","ACTIVE","END","activeValue","translationX","velocity","velocityX","onHandlerStateChange","oldState","clamp","onLayout","e","layout","transform","interpolate","inputRange","outputRange","extrapolate","map","i","tickSize","alignItems","Text"],"mappings":"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"}