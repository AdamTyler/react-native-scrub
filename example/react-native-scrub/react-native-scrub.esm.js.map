{"version":3,"file":"react-native-scrub.esm.js","sources":["../../src/linear.ts","../../src/index.tsx"],"sourcesContent":["function makeItArrayIfItsNot(input) {\n  return Object.prototype.toString.call(input) !== '[object Array]'\n    ? [input]\n    : input;\n}\n\n/**\n *\n * Utilizes bisection method to search an interval to which\n * point belongs to, then returns an index of left or right\n * border of the interval\n *\n * @param {Number} point\n * @param {Array} intervals\n * @param {Boolean} useRightBorder\n * @returns {Number}\n */\n\nfunction findIntervalBorderIndex(point, intervals, useRightBorder?: boolean) {\n  //If point is beyond given intervals\n  if (point < intervals[0]) return 0;\n  if (point > intervals[intervals.length - 1]) return intervals.length - 1;\n  //If point is inside interval\n  //Start searching on a full range of intervals\n  var indexOfNumberToCompare,\n    leftBorderIndex = 0,\n    rightBorderIndex = intervals.length - 1;\n  //Reduce searching range till it find an interval point belongs to using binary search\n  while (rightBorderIndex - leftBorderIndex !== 1) {\n    indexOfNumberToCompare =\n      leftBorderIndex + Math.floor((rightBorderIndex - leftBorderIndex) / 2);\n    point >= intervals[indexOfNumberToCompare]\n      ? (leftBorderIndex = indexOfNumberToCompare)\n      : (rightBorderIndex = indexOfNumberToCompare);\n  }\n  return useRightBorder ? rightBorderIndex : leftBorderIndex;\n}\n\n/**\n * Evaluates interpolating line/lines at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}\n */\n\n/**\n *\n * Evaluates y-value at given x point for line that passes\n * through the points (x0,y0) and (y1,y1)\n *\n * @param x\n * @param x0\n * @param y0\n * @param x1\n * @param y1\n * @returns {Number}\n */\n\nfunction linearInterpolation(x, x0, y0, x1, y1) {\n  var a = (y1 - y0) / (x1 - x0);\n  var b = -a * x0 + y0;\n  return a * x + b;\n}\n\nexport function linear(pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results: any = [];\n  pointsToEvaluate = makeItArrayIfItsNot(pointsToEvaluate);\n  pointsToEvaluate.forEach(function(point) {\n    var index = findIntervalBorderIndex(point, functionValuesX);\n    if (index == functionValuesX.length - 1) index--;\n    results.push(\n      linearInterpolation(\n        point,\n        functionValuesX[index],\n        functionValuesY[index],\n        functionValuesX[index + 1],\n        functionValuesY[index + 1]\n      )\n    );\n  });\n  return results;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  Dimensions,\n  Animated,\n  ViewStyle,\n} from 'react-native';\nimport { linear } from './linear';\nimport { clamp, range } from 'lodash-es';\n\nimport {\n  PanGestureHandler,\n  State,\n  PanGestureHandlerStateChangeEvent,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\ninterface TickProps {\n  value: number;\n  index: number;\n  spacing: number;\n}\n\ninterface Props {\n  min: number;\n  max: number;\n  step: number;\n  value: number;\n  spacing?: number;\n  onChange: (value: number) => void;\n  onUpdate: (value: number) => void;\n  round?: (value: number) => number;\n  renderTick: (tick: TickProps) => React.ReactNode;\n}\n\nconst FULL_WIDTH = Dimensions.get('window').width;\n\nconst defaultRound = (v: number) => Math.round(v);\n\nexport const Tick: React.FC<TickProps> = ({ value, index, spacing }) => {\n  let tickSize = 30;\n  if (index % 5 === 0) {\n    tickSize = 40;\n  }\n  if (index % 10 === 0) {\n    tickSize = 50;\n  }\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        left: index * spacing,\n      }}\n    >\n      <View\n        style={[\n          styles.tick,\n          {\n            height: tickSize,\n          },\n        ]}\n      />\n      {index % 10 === 0 && (\n        <Text style={styles.tickLabel}>{Math.round(value)}</Text>\n      )}\n    </View>\n  );\n};\n\nexport const CenterLine: React.FC<{ style?: ViewStyle }> = ({ style }) => {\n  return <View style={[styles.centerLine, style]} />;\n};\n\nexport const Slider: React.FC<Props> = ({\n  min,\n  max,\n  step,\n  value,\n  onChange,\n  onUpdate,\n  round = defaultRound,\n  spacing = 20,\n  renderTick,\n  children,\n}) => {\n  const TICKS_ARRAY = range(min, max, step);\n  const NUMBER_OF_TICKS = TICKS_ARRAY.length;\n  const [width, setWidth] = useState(FULL_WIDTH);\n  const halfWidth = (width || 0) / 2;\n  const minScroll = -(NUMBER_OF_TICKS * spacing);\n  const maxScroll = 0;\n\n  const valueToPx = (degrees: number) => {\n    return linear(degrees, [max, min], [minScroll, maxScroll])[0];\n  };\n\n  const [translateX] = useState(() => new Animated.Value(valueToPx(value)));\n  const offsetX = useRef(0);\n\n  useEffect(() => {\n    Animated.spring(translateX, {\n      toValue: valueToPx(value),\n    }).start();\n    offsetX.current = 0;\n  }, [value]);\n\n  const dragXToValue = (x: number) => {\n    const value = linear(x, [minScroll, maxScroll], [max, min])[0];\n    return round(value);\n  };\n\n  const onHandlerStateChange = (event: PanGestureHandlerStateChangeEvent) => {\n    let activeValue = value;\n\n    if (event.nativeEvent.state === State.END) {\n      activeValue = dragXToValue(\n        valueToPx(value) + offsetX.current + event.nativeEvent.translationX\n      );\n    }\n\n    if (event.nativeEvent.oldState === State.ACTIVE) {\n      offsetX.current += event.nativeEvent.translationX;\n      onChange(clamp(activeValue, min, max));\n    }\n  };\n\n  const onGestureEvent = (event: PanGestureHandlerGestureEvent) => {\n    if (\n      event.nativeEvent.state === State.ACTIVE ||\n      event.nativeEvent.state === State.END\n    ) {\n      let activeValue = dragXToValue(\n        valueToPx(value) + offsetX.current + event.nativeEvent.translationX\n      );\n\n      if (activeValue < min) {\n        activeValue = min;\n      } else if (activeValue > max) {\n        activeValue = max;\n      }\n\n      onUpdate(activeValue);\n\n      Animated.spring(translateX, {\n        toValue: valueToPx(activeValue),\n        velocity: event.nativeEvent.velocityX,\n      }).start(() => {\n        offsetX.current = 0;\n      });\n    }\n  };\n\n  return (\n    <PanGestureHandler\n      onGestureEvent={onGestureEvent}\n      onHandlerStateChange={onHandlerStateChange}\n    >\n      <View\n        style={styles.container}\n        onLayout={e => {\n          setWidth(e.nativeEvent.layout.width);\n        }}\n      >\n        <Animated.View\n          style={[\n            styles.ticks,\n            {\n              left: halfWidth,\n              transform: [\n                {\n                  translateX: translateX.interpolate({\n                    inputRange: [valueToPx(max), valueToPx(min)],\n                    outputRange: [valueToPx(max), valueToPx(min)],\n                    extrapolate: 'clamp',\n                  }),\n                },\n              ],\n            },\n          ]}\n        >\n          {TICKS_ARRAY.map((i, index) => {\n            return renderTick({\n              value: i,\n              index,\n              spacing,\n            });\n          })}\n        </Animated.View>\n        {children}\n      </View>\n    </PanGestureHandler>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: 100,\n  },\n  ticks: {\n    position: 'absolute',\n    flexDirection: 'row',\n    width: '100%',\n    height: 100,\n  },\n  tick: {\n    position: 'absolute',\n    top: 0,\n    width: 1,\n    backgroundColor: '#dfdfe6',\n    overflow: 'visible',\n  },\n  tickLabel: {\n    position: 'absolute',\n    bottom: 0,\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  centerLine: {\n    position: 'absolute',\n    top: 0,\n    left: '50%',\n    height: 50,\n    width: 2,\n    borderRadius: 1,\n  },\n});\n"],"names":["makeItArrayIfItsNot","input","Object","prototype","toString","call","findIntervalBorderIndex","point","intervals","useRightBorder","length","indexOfNumberToCompare","leftBorderIndex","rightBorderIndex","Math","floor","linearInterpolation","x","x0","y0","x1","y1","a","b","linear","pointsToEvaluate","functionValuesX","functionValuesY","results","forEach","index","push","FULL_WIDTH","Dimensions","get","width","defaultRound","v","round","Tick","value","spacing","tickSize","React","View","style","alignItems","left","styles","tick","height","Text","tickLabel","CenterLine","centerLine","Slider","min","max","step","onChange","onUpdate","renderTick","children","TICKS_ARRAY","range","NUMBER_OF_TICKS","useState","setWidth","halfWidth","minScroll","maxScroll","valueToPx","degrees","Animated","Value","translateX","offsetX","useRef","useEffect","spring","toValue","start","current","dragXToValue","onHandlerStateChange","event","activeValue","nativeEvent","state","State","END","translationX","oldState","ACTIVE","clamp","onGestureEvent","velocity","velocityX","PanGestureHandler","container","onLayout","e","layout","ticks","transform","interpolate","inputRange","outputRange","extrapolate","map","i","StyleSheet","create","position","flexDirection","top","backgroundColor","overflow","bottom","fontSize","textAlign","borderRadius"],"mappings":"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"}